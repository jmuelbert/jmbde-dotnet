---
# SPDX-FileCopyrightText: ¬© 2016-2023 J√ºrgen M√ºlbert
#
# SPDX-License-Identifier: EUPL-1.2
#

name: CI

on:
  push:
    branches:
      - main
    paths:
      - src/**
      - global.json
      - jmbde.sln

  pull_request:
    branches:
      - main

permissions:
  contents: read

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CONFIGURATION: Release
  DOTNET_CLI_TELEMETRY_OUTPUT: 1
  DOTNET_NOLOGO: 1
  DOTNET_SDK_VERSION: 7.0.x
  NET_CORE_VERSION: net7.0
  NET_FRAMEWORK_VERSION: net48

jobs:
  build:
    name: "üßä Module Build"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: "üß∞ Check out code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "‚öôÔ∏è Execute GitVersion"
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2

      - name: "‚öô Display the version"
        run: |
          echo "Version: ${{ steps.gitversion.outputs.semVer }}"

      - name: "‚öôÔ∏è Setup dotnet"
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "‚öôÔ∏è Check dotnet sdk install"
        run: dotnet --info

      - name: "‚öôÔ∏è Install dependencies"
        run: dotnet restore

      - name: "üöß Build solution"
        run: |
          dotnet tool update --global dotnet-ef
          dotnet ef database update --project src/jmbde
          dotnet build  -p:Configuration=Release --no-restore -p:version=${{ steps.gitversion.outputs.semVer }}

      - name: "üì§ Upload artifact: Application"
        uses: actions/upload-artifact@v3
        with:
          name: DotnetSolution
          path: ${{runner.workspace}}/dist

  tests:
    name: ${{ matrix.session }} ${{ matrix.dotnet-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        dotnet-version:
          - "7.x"
          - "6.x"
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest

    steps:
      - name: "üß∞ Check out code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "‚öôÔ∏è Execute GitVersion"
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2

      - name: "‚öô Display the version"
        run: |
          echo "Version: ${{ steps.gitversion.outputs.semVer }}"

      - name: "‚öôÔ∏è Setup dotnet"
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: "‚öôÔ∏è Check dotnet sdk install"
        run: dotnet --info

      - name: "‚öôÔ∏è Install dependencies"
        run: dotnet restore

      - name: Unit & integration test
        run: |
          dotnet tool update --global dotnet-ef
          dotnet ef database update --project src/jmbde
          dotnet test  -p:Configuration=Release --no-restore -p:version=${{ steps.gitversion.outputs.semVer }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  update_release_draft:
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Create Release Notes and Pre-Release
        id: release_gh
        uses: softprops/action-gh-release@v1
        with:
          draft: true # create a draft (unpublished) release
          prerelease: true # identify the release as a prerelease
          body_path: ./CHANGELOG.md # use the contents of this file as the body of the release notes

  deployPrereleases:
    name: Deploy Pre-Release
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    environment: PreRelease
    needs:
      - build
      - tests
      - update_release_draft

    steps:
      - name: Restore Dotnet Solution
        uses: actions/download-artifact@v3
        with:
          name: DotnetSolution
          path: dist

      - name: Upload Artifact to Pre-Release
        uses: actions/upload-artifact@v3
        with:
          name: Pre-Release Solution
          path: dist

  deploy:
    name: Deploy Release on nuget
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    environment: Release
    needs:
      - build
      - tests
      - update_release_draft

    steps:
      - name: Restore Dotnet Solution
        uses: actions/download-artifact@v3
        with:
          name: DotnetSolution
          path: dist/

      - name: Collect Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: "**/*.nupkg"

      # - name: Publish the package to NuGet.Org
      #  run: dotnet nuget push "**/*.nupkg" -s https://api.nuget.org/v3/index.json -k ${{ secrets.PUBLISH_NUGET_ORG }} --skip-duplicate
