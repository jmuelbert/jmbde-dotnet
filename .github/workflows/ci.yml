---
name: CI

on:
  push:
    branches:
      - master
      - main 
      
    tags-ignore:
      - '*'
    paths:
      - src/**
      - global.json
      - jmbde.sln
      - .github/workflows/build.yml

  pull_request:
    branches: [master]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '.editorconfig'
      - 'docs/**'

env:
  CONFIGURATION: Release
  DOTNET_CLI_TELEMETRY_OUTPUT: 1
  DOTNET_NOLOGO: 1
  DOTNET_SDK_VERSION: 7.0.x
  NET_CORE_VERSION: net7.0
  NET_FRAMEWORK_VERSION: net48

jobs:
  build:
    name: Module Build
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      - uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json


      - name: Check dotnet sdk install
        run: dotnet --info

      - name: Install dependencies
        run: dotnet restore

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15

      - name: Display the version
        run: |
          echo "Version: ${{ steps.gitversion.outputs.semVer }}"

      - name: Build solution
        run: |
          dotnet tool update --global dotnet-ef
          dotnet ef database update --project src/jmbde
          dotnet build  -p:Configuration=Release --no-restore -p:version=${{ steps.gitversion.outputs.semVer }} --output ${{runner.workspace}}/dist

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: DotnetSolution
          path: ${{runner.workspace}}/dist

  tests:
    name: ${{ matrix.session }} ${{ matrix.dotnet-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { dotnet-version: '7.0.101', os: ubuntu-latest }
          - { dotnet-version: '7.0.101', os: 'windows-latest' }
          - { dotnet-version: '7.0.101', os: 'macos-latest' }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      - uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json


      - name: Check dotnet sdk install
        run: dotnet --info

      - name: Install dependencies
        run: dotnet restore

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15

      - name: Display the version
        run: |
          echo "Version: ${{ steps.gitversion.outputs.semVer }}"

      - name: Unit & integration test
        run: |
          dotnet tool update --global dotnet-ef
          dotnet ef database update --project src/jmbde
          dotnet test  -p:Configuration=Release --no-restore -p:version=${{ steps.gitversion.outputs.semVer }} --output ${{runner.workspace}}/dist

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5.22.0
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: '${{ steps.check-version.outputs.tag }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{Â secrets.GITHUB_TOKEN }}

  deployPrereleases:
    name: Deploy Pre-Release
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    environment: PreRelease
    needs:
      - build
      - tests

    steps:
      - name: Restore Dotnet Solution
        uses: actions/download-artifact@v3
        with:
          name: DotnetSolution
          path: dist

      - name: Upload Artifact to Pre-Release
        uses: actions/upload-artifact@v3
        with:
          name: Pre-Release Solution
          path: dist

  deploy:
    name: Deploy Release on nuget
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    environment: Release
    needs:
      - build
      - tests
      - changeLog
      - releaseNotes

    steps:
      - name: Restore Dotnet Solution
        uses: actions/download-artifact@v3
        with:
          name: DotnetSolution
          path: dist/

      - name: Collect Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: '**/*.nupkg'

      # - name: Publish the package to NuGet.Org
      #  run: dotnet nuget push "**/*.nupkg" -s https://api.nuget.org/v3/index.json -k ${{ secrets.PUBLISH_NUGET_ORG }} --skip-duplicate
